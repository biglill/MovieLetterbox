package com.example.demo;

import com.google.auth.oauth2.GoogleCredentials;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.cloud.FirestoreClient;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.WriteResult;
import com.google.api.core.ApiFuture;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.ExecutionException;

public class FirebaseService {

    private final Firestore db;

    public FirebaseService() throws IOException {
        // IMPORTANT: Make sure your "serviceAccountKey.json" file is in the root directory of your project.
        FileInputStream serviceAccount = new FileInputStream("serviceAccountKey.json");

        FirebaseOptions options = new FirebaseOptions.Builder()
                .setCredentials(GoogleCredentials.fromStream(serviceAccount))
                .build();

        // Initialize the app only if it hasn't been initialized yet.
        if (FirebaseApp.getApps().isEmpty()) {
            FirebaseApp.initializeApp(options);
        }

        db = FirestoreClient.getFirestore();
    }

    /**
     * Saves a user's details to the "users" collection in Firestore.
     * The document ID will be automatically generated by Firestore.
     * @param userData A map containing the user's data (e.g., name, email).
     * @throws ExecutionException If the database operation fails.
     * @throws InterruptedException If the thread is interrupted.
     */
    public void saveUserDetails(Map<String, Object> userData) throws ExecutionException, InterruptedException {
        // Adds a new document with a generated ID to the "users" collection.
        ApiFuture<WriteResult> future = db.collection("users").document().set(userData);

        // future.get() blocks until the operation is complete and returns metadata.
        System.out.println("User data saved successfully at: " + future.get().getUpdateTime());
    }
}
