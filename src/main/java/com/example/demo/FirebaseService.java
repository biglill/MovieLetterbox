package com.example.demo;

import com.google.api.core.ApiFuture;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.firestore.*;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.cloud.FirestoreClient;

import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.concurrent.ExecutionException;

public class FirebaseService {

    private final Firestore db;

    public FirebaseService() throws IOException {
        // FIX: Load the service account key from the classpath as a resource stream.
        // This is more reliable than a file path. Make sure the JSON file is in `src/main/resources`.
        InputStream serviceAccount = getClass().getClassLoader().getResourceAsStream("serviceAccountKey.json");

        if (serviceAccount == null) {
            throw new IOException("Error: serviceAccountKey.json not found in src/main/resources. Please ensure the file is there.");
        }

        FirebaseOptions options = new FirebaseOptions.Builder()
                .setCredentials(GoogleCredentials.fromStream(serviceAccount))
                .build();

        if (FirebaseApp.getApps().isEmpty()) {
            FirebaseApp.initializeApp(options);
        }

        db = FirestoreClient.getFirestore();
    }

    /**
     * Saves a user's details to the "users" collection in Firestore.
     * The document ID will be automatically generated by Firestore.
     * @param userData A map containing the user's data (e.g., name, email).
     * @return The auto-generated document ID of the new user.
     * @throws ExecutionException If the database operation fails.
     * @throws InterruptedException If the thread is interrupted.
     */
    public String saveUserDetails(Map<String, Object> userData) throws ExecutionException, InterruptedException {
        DocumentReference docRef = db.collection("users").document();
        ApiFuture<WriteResult> future = docRef.set(userData);
        System.out.println("User data saved successfully at: " + future.get().getUpdateTime());
        return docRef.getId();
    }

    /**
     * CHANGE: Retrieves a user document from Firestore based on their email.
     * This is essential for the sign-in process.
     * @param email The email of the user to search for.
     * @return A Map containing the user's data if found, otherwise null.
     * @throws ExecutionException If the database operation fails.
     * @throws InterruptedException If the thread is interrupted.
     */
    public Map<String, Object> getUserByEmail(String email) throws ExecutionException, InterruptedException {
        // Create a query to search for a user with the matching email.
        CollectionReference users = db.collection("users");
        Query query = users.whereEqualTo("email", email);

        // Execute the query.
        ApiFuture<QuerySnapshot> querySnapshot = query.get();

        // Check if any documents were returned.
        if (!querySnapshot.get().getDocuments().isEmpty()) {
            // Get the first document (emails should be unique, so there should only be one).
            QueryDocumentSnapshot document = querySnapshot.get().getDocuments().get(0);
            System.out.println("Found user with email: " + email);
            return document.getData();
        } else {
            System.out.println("No user found with email: " + email);
            return null;
        }
    }
}
